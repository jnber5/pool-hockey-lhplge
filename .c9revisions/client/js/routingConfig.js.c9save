{"ts":1377728787254,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function(exports){\n\n    var config = {\n\n        /* List all the roles you wish to use in the app\n        * You have a max of 31 before the bit shift pushes the accompanying integer out of\n        * the memory footprint for an integer\n        */\n        roles :[\n            'public',\n            'user',\n            'admin'],\n\n        /*\n        Build out all the access levels you want referencing the roles listed above\n        You can use the \"*\" symbol to represent access to all roles\n         */\n        accessLevels : {\n            'public' : \"*\",\n            'anon': ['public'],\n            'user' : ['user', 'admin'],\n            'admin': ['admin']\n        }\n\n    }\n\n    exports.userRoles = buildRoles(config.roles);\n    exports.accessLevels = buildAccessLevels(config.accessLevels, exports.userRoles);\n\n    /*\n        Method to build a distinct bit mask for each role\n        It starts off with \"1\" and shifts the bit to the left for each element in the\n        roles array parameter\n     */\n\n    function buildRoles(roles){\n\n        var bitMask = \"01\";\n        var userRoles = {};\n\n        for(var role in roles){\n            var intCode = parseInt(bitMask, 2);\n            userRoles[roles[role]] = {\n                bitMask: intCode,\n                title: roles[role]\n            };\n            bitMask = (intCode << 1 ).toString(2)\n        }\n\n        return userRoles;\n    }\n\n    /*\n    This method builds access level bit masks based on the accessLevelDeclaration parameter which must\n    contain an array for each access level containing the allowed user roles.\n     */\n    function buildAccessLevels(accessLevelDeclarations, userRoles){\n\n        var accessLevels = {};\n        for(var level in accessLevelDeclarations){\n\n            if(typeof accessLevelDeclarations[level] == 'string'){\n                if(accessLevelDeclarations[level] == '*'){\n\n                    var resultBitMask = '';\n\n                    for( var role in userRoles){\n                        resultBitMask += \"1\"\n                    }\n                    //accessLevels[level] = parseInt(resultBitMask, 2);\n                    accessLevels[level] = {\n                        bitMask: parseInt(resultBitMask, 2),\n                        title: accessLevelDeclarations[level]\n                    };\n                }\n                else console.log(\"Access Control Error: Could not parse '\" + accessLevelDeclarations[level] + \"' as access definition for level '\" + level + \"'\")\n\n            }\n            else {\n\n                var resultBitMask = 0;\n                for(var role in accessLevelDeclarations[level]){\n                    if(userRoles.hasOwnProperty(accessLevelDeclarations[level][role]))\n                        resultBitMask = resultBitMask | userRoles[accessLevelDeclarations[level][role]].bitMask\n                    else console.log(\"Access Control Error: Could not find role '\" + accessLevelDeclarations[level][role] + \"' in registered roles while building access for '\" + level + \"'\")\n                }\n                accessLevels[level] = {\n                    bitMask: resultBitMask,\n                    title: accessLevelDeclarations[level][role]\n                };\n            }\n        }\n\n        return accessLevels;\n    }\n\n})(typeof exports === 'undefined' ? this['routingConfig'] = {} : exports);"]],"start1":0,"start2":0,"length1":0,"length2":3318}]],"length":3318}
