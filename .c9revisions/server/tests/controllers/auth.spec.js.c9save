{"ts":1378232485336,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var expect = require('chai').expect\n    , sinon = require('sinon')\n    , AuthCtrl = require('../../controllers/auth')\n    , User = require('../../models/User');\n\ndescribe('Auth controller', function() {\n\n    var req = { }\n        , res = {}\n        , next = {}\n        , sandbox = sinon.sandbox.create();\n\n    beforeEach(function() {\n\n    });\n\n    afterEach(function() {\n        sandbox.restore();\n    });\n\n    describe('register()', function() {\n\n        beforeEach(function() {\n            req.body = {\n                username: \"user\",\n                password: \"pass\",\n                role: 1\n            };\n        });\n\n        it('should return a 400 when user validation fails', function(done) {\n\n            var userValidateStub = sandbox.stub(User, 'validate').throws();\n            res.send = function(httpStatus) {\n                expect(httpStatus).to.equal(400);\n                done();\n            };\n\n            AuthCtrl.register(req, res, next);\n        });\n\n        it('should return a 403 when UserAlreadyExists error is returned from User.addUser()', function(done) {\n            var userValidateStub = sandbox.stub(User, 'validate').returns();\n            var userAddUserStub = sandbox.stub(User, 'addUser', function(username, password, role, callback) {\n                callback('UserAlreadyExists');\n            });\n\n            res.send = function(httpStatus) {\n                expect(httpStatus).to.equal(403);\n                done();\n            };\n\n            AuthCtrl.register(req, res, next);\n        });\n\n        it('should return a 500 if error other than UserAlreadyExists is returned from User.addUser()', function(done) {\n            var userValidateStub = sandbox.stub(User, 'validate').returns();\n            var userAddUserStub = sandbox.stub(User, 'addUser', function(username, password, role, callback) {\n                callback('SomeError');\n            });\n\n            res.send = function(httpStatus) {\n                expect(httpStatus).to.equal(500);\n                done();\n            };\n\n            AuthCtrl.register(req, res, next);\n        });\n\n        it('should call next() with an error argument if req.logIn() returns error', function(done) {\n            var userValidateStub = sandbox.stub(User, 'validate').returns();\n            var userAddUserStub = sandbox.stub(User, 'addUser', function(username, password, role, callback) {\n                callback(null, req.body);\n            });\n            req.logIn = function(user, callback) { return callback('SomeError'); };\n\n            next = function(err) {\n                expect(err).to.exist;\n                done();\n            };\n\n            AuthCtrl.register(req, res, next);\n        });\n\n        it('should return a 200 with a username and role in the response body', function(done) {\n            var userValidateStub = sandbox.stub(User, 'validate').returns();\n            var userAddUserStub = sandbox.stub(User, 'addUser', function(username, password, role, callback) {\n                callback(null, req.body);\n            });\n            req.logIn = function(user, callback) { return callback(null); };\n\n            res.json = function(httpStatus, user) {\n                expect(httpStatus).to.equal(200);\n                expect(user.username).to.exist;\n                expect(user.role).to.exist;\n                done();\n            };\n\n            AuthCtrl.register(req, res, next);\n        });\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":3428}]],"length":3428}
